/* --------------------------------- MIXINS -------------------------------- */

@mixin clearfix() {
  &:before,
  &:after {
    content: "";
    display: table;
  }
  &:after {
    clear: both;
  }
}


/*
--- RETINA ---
div.logo {
    background: url("logo.png") no-repeat;
    @include image-2x("logo2x.png", 100px, 25px);
}*/

@mixin image-2x($image, $width, $height) {
  @media (min--moz-device-pixel-ratio: 1.3), (-o-min-device-pixel-ratio: 2.6/2), (-webkit-min-device-pixel-ratio: 1.3), (min-device-pixel-ratio: 1.3), (min-resolution: 1.3dppx) {
    /* on retina, use image that's scaled by 2 */
    background-image: url($image);
    background-size: $width $height;
  }
}

@mixin inline-list($margin, $padding) {
  list-style-type: none;
  display: flex;
  justify-content: stretch;
  &,
  & li {
    margin: $margin;
    padding: $padding;
  }
}

@mixin linx ($link, $visit, $hover, $active) {
  a {
    color: $link;
    &:visited {
      color: $visit;
    }
    &:hover {
      color: $hover;
    }
    &:active {
      color: $active;
    }
  }
}

@mixin ghost-btn ($couleur1, $couleur2, $border-width) {
  display: inline-block;
  color: $couleur1;
  background: transparent;
  border: $border-width solid $couleur1;
  text-align: center;
  text-decoration: none;
  transition: all 0.25s ease-in;
  cursor: pointer;
  &:hover,
  &:focus,
  &:active {
    color: $couleur2;
    border: $border-width solid $couleur1;
    background-color: $couleur1;
  }
}

@mixin opacity($op) {
  opacity: $op;
  $opacity-ie: ($op * 100);
  filter: alpha(opacity=$opacity-ie);
}

@mixin size($w, $h) {
  width: $w;
  height: $h;
}

@mixin square($size) {
  @include size($size, $size);
}

// generic transform
@mixin transform($transforms) {
  transform: $transforms;
}

// rotate
@mixin rotate ($deg) {
  @include transform(rotate(#{$deg}deg));
}

// scale
@mixin scale($scale) {
  @include transform(scale($scale));
}

// translate
@mixin translate ($x, $y) {
  @include transform(translate($x, $y));
}

// skew
@mixin skew ($x, $y) {
  @include transform(skew(#{$x}deg, #{$y}deg));
}

//transform origin
@mixin transform-origin ($origin) {
  transform-origin: $origin;
}

@mixin transition-transform($transition...) {
  transition: transform $transition;
}

@mixin box-shadow($shadow...) {
  box-shadow: $shadow;
}

// =============================================================================
// String Replace
// =============================================================================
@function str-replace($string, $search, $replace: "") {
  $index: str-index($string, $search);
  @if $index {
    @return str-slice($string, 1, $index - 1)+$replace+str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
  }
  @return $string;
}

// =============================================================================
// Font Face
// =============================================================================

/**
* USAGE:
* refere to https://gist.github.com/jonathantneal/d0460e5c2d5d7f9bc5e6
*/

@mixin font-face($name, $path, $weight: null, $style: null, $exts: eot woff2 woff ttf svg) {
  $src: null;
  $extmods: ( eot: "?", svg: "#" + str-replace($name, " ", "_"));
  $formats: ( otf: "opentype", ttf: "truetype");
  @each $ext in $exts {
    $extmod: if(map-has-key($extmods, $ext), $ext + map-get($extmods, $ext), $ext);
    $format: if(map-has-key($formats, $ext), map-get($formats, $ext), $ext);
    $src: append($src, url(quote($path + "." + $extmod)) format(quote($format)), comma);
  }
  @font-face {
    font-family: quote($name);
    font-style: $style;
    font-weight: $weight;
    src: $src;
  }
}
